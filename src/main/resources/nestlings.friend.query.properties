#friend requests
insert.friend.request.qry=insert into friend_request(userId,requestedUserId,createdDate,statusId) \
  values (:userId,:friendUserId,now(),5)
insert.notification.qry=insert into notification (notificationTypeId,statusId,notification,objectDetails,createdDate) \
  values (:notificationTypeId,:statusId,:notification,:objectDetails,now())
insert.user.notification.qry=insert into user_notification (userId,entityId,notificationId) \
  values (:userId,:entityId,:notificationId)

is.member.friend.qry=select count(*) from friend f where f.userID = :userId and f.friendUserID = :friendUserId
get.friend.or.request.qry=select fr.friendRequestId,fr.statusId,fr.userId,fr.requestedUserId from friend_request fr \
  where fr.userId=:userId and fr.requestedUserId =:friendUserId or fr.requestedUserId=:userId and fr.userId = :friendUserId and fr.statusId in (5,6)
get.member.sent.friend.requests.qry=select fr.friendRequestId,u.userId,fr.requestedUserId,fr.statusId,u.firstName,u.lastName, \
  upi.profileCroppedImageUrl as profileImageUrl \
  from friend_request fr \
  join user u on u.userID = fr.requestedUserId \
  left join user_profile_image upi on upi.userID = u.userID and upi.isCurrent = 1 \
  where fr.userId = :userId and fr.statusId in (5,6)
get.member.received.friend.requests.qry=select fr.friendRequestId,u.userId,fr.requestedUserId,fr.statusId,u.firstName,u.lastName, \
  upi.profileCroppedImageUrl as profileImageUrl \
  from friend_request fr \
  join user u on u.userID = fr.userId \
  left join user_profile_image upi on upi.userID = u.userID and upi.isCurrent = 1 \
  where fr.requestedUserId = :userId and fr.statusId in (5,6)

accept.member.friend.request.qry=insert into friend (createdDate,friendUserID,userID) values (now(),:friendId,:userId)
update.friend.requested.request.qry=update friend_request fr set fr.statusId =:statusId where fr.userId=:friendId and fr.requestedUserId = :userId
remove.friend.qry=delete from friend where friendUserId = :friendUserId and userID = :userId
ignore.friend.request.qry=update friend_request fr set fr.statusId=9, fr.updatedDate=now() where fr.userId =:friendId and fr.requestedUserId=:userId
cancel.friend.request.qry=update friend_request fr set fr.statusId = 2, fr.updatedDate = now() where fr.userId =:userId and fr.requestedUserId =:friendId

#new queries
#friend requests
insert.friend.request.qry.new=insert into friend_request(userId,requestedUserId,createdDate,statusId) \
  values (:userId,:friendUserId,now(),5)
insert.notification.qry.new=insert into notification (notificationTypeId,statusId,notification,objectDetails,createdDate) \
  values (:notificationTypeId,:statusId,:notification,:objectDetails,now())
insert.user.notification.qry.new=insert into user_notification (userId,entityId,notificationId) \
  values (:userId,:entityId,:notificationId)


get.member.sent.friend.requests.qry.new=select fr.friendRequestId,u.userId,fr.requestedUserId,fr.statusId,u.firstName,u.lastName, \
  upi.profileCroppedImageUrl as profileImageUrl \
  from friend_request fr \
  join user u on u.userID = fr.requestedUserId \
  left join user_profile_image upi on upi.userID = u.userID and upi.isCurrent = 1 \
  where fr.userId = :userId and fr.statusId in (5,6)
get.member.received.friend.requests.qry.new=select fr.friendRequestId,u.userId,fr.requestedUserId,fr.statusId,u.firstName,u.lastName, \
  upi.profileCroppedImageUrl as profileImageUrl \
  from friend_request fr \
  join user u on u.userID = fr.userId \
  left join user_profile_image upi on upi.userID = u.userID and upi.isCurrent = 1 \
  where fr.requestedUserId = :userId and fr.statusId in (5,6)


#get member friends
user.friends.new.query=select f.friendId,f.friendUserId,u.firstName,u.lastName,upi.profileImageUrl from friend f \
  join user u on u.userID = f.friendUserID \
  left join user_profile_image upi on upi.userID = f.friendUserID and upi.isCurrent = 1 where f.userID=:userId


#friend service new queries
#friend requests
insert.friend.request.qry.new2=insert into friend_request(userId,requestedUserId,createdDate,statusId) \
  values (:userId,:friendUserId,now(),5)
insert.notification.qry.new2=insert into notification (notificationTypeId,statusId,notification,objectDetails,createdDate) \
  values (:notificationTypeId,:statusId,:notification,:objectDetails,now())
insert.user.notification.qry.new2=insert into user_notification (userId,entityId,notificationId) \
  values (:userId,:entityId,:notificationId)

is.member.friend.qry.new2=select count(*) from friend f where f.userID = :userId and f.friendUserID = :friendUserId
get.friend.or.request.qry.new2=select fr.friendRequestId,fr.statusId,fr.userId,fr.requestedUserId from friend_request fr \
  where fr.userId=:userId and fr.requestedUserId =:friendUserId or fr.requestedUserId=:userId and fr.userId = :friendUserId and fr.statusId in (5,6)
get.member.sent.friend.requests.qry.new2=select fr.friendRequestId,u.userId,fr.requestedUserId,fr.statusId,u.firstName,u.lastName, \
  upi.profileCroppedImageUrl as profileImageUrl \
  from friend_request fr \
  join user u on u.userID = fr.requestedUserId \
  left join user_profile_image upi on upi.userID = u.userID and upi.isCurrent = 1 \
  where fr.userId = :userId and fr.statusId in (5,6)
get.member.received.friend.requests.qry.new2=select fr.friendRequestId,u.userId,fr.requestedUserId,fr.statusId,u.firstName,u.lastName, \
  upi.profileCroppedImageUrl as profileImageUrl \
  from friend_request fr \
  join user u on u.userID = fr.userId \
  left join user_profile_image upi on upi.userID = u.userID and upi.isCurrent = 1 \
  where fr.requestedUserId = :userId and fr.statusId in (5,6)

accept.member.friend.request.qry.new2=insert into friend (createdDate,friendUserID,userID) values (now(),:friendId,:userId)
update.friend.requested.request.qry.new2=update friend_request fr set fr.statusId =:statusId where fr.userId=:friendId and fr.requestedUserId = :userId
remove.friend.qry.new2=delete from friend where friendUserId = :friendUserId and userID = :userId
ignore.friend.request.qry.new2=update friend_request fr set fr.statusId=9, fr.updatedDate=now() where fr.userId =:friendId and fr.requestedUserId=:userId
cancel.friend.request.qry.new2=update friend_request fr set fr.statusId = 8, fr.updatedDate = now() where fr.userId =:userId and fr.requestedUserId =:friendId

remove.friendrequest.qry=delete from friend_request where requestedUserId = :friendUserId and userID = :userId

#get member friends
user.friends.query=select f.friendId,f.friendUserId,u.firstName,u.lastName,upi.profileImageUrl from friend f \
  join user u on u.userID = f.friendUserID \
  left join user_profile_image upi on upi.userID = f.friendUserID and upi.isCurrent = 1 where f.userID=:userId

#get count of friends -append userid
user.friends.count.query = select count(*) from friend f \
  join user u on u.userID = f.friendUserID \
  left join user_profile_image upi on upi.userID = f.friendUserID and upi.isCurrent = 1 where f.userID=

disable.notification.qry=update notification n \
  join user_notification un on un.notificationId = n.notificationId \
  and un.userId = :userId and un.entityId = :entityId \
  set n.statusId = 2 where n.notificationId = un.notificationId

#get user by name for search
get.member.lookup.query=SELECT Distinct userId,firstName,lastName FROM user \
WHERE userId NOT IN (SELECT userId FROM college_admin_user) \
And (lower(firstName) like :name \
or lower(lastName) like :name \
or lower(concat(firstName,' ',lastName)) like :name \
or lower(concat(lastName,' ',firstName)) like :name) \
And userId!=:userId

#get Suggested Friends Based on college applied
get.suggested.member.query=SELECT u.userId,u.firstName,u.lastName,upi.profileCroppedImageUrl as profileImageUrl FROM college_application ca \
join user u on u.userId=ca.userId \
left join user_profile_image upi on upi.userID = u.userID and upi.isCurrent = 1 \
where u.userId != :userId \
and u.userId NOT IN (SELECT cau.userId FROM college_admin_user cau) \
and ca.collegeDetailsId in (select ca2.collegeDetailsId from college_application ca2 where ca2.userId=:userId) \
and u.userId not in (select f.frienduserID from friend f where f.userID=:userId) limit 10 offset 0