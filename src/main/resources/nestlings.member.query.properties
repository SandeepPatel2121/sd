# member profile images
deactive.current.member.profileimages.qry=UPDATE user_profile_image set isCurrent = 0, updatedDate = now() WHERE userID = :userId
insert.member.profileimage.qry=insert INTO user_profile_image (userID,profileImageUrl,profileCroppedImageUrl,isCurrent,createdDate) \
  VALUES (:userId,:profileImageUrl,:profileCroppedImageUrl,1,now())

deactive.current.member.coverimages.qry=UPDATE cover_image set isCurrent = 0, updatedDate = now() WHERE entityId = :entityId
insert.member.coverimage.qry=insert INTO cover_image (entityId,coverImageUrl,coverCroppedImageUrl,isCurrent,createdDate) \
  VALUES (:entityId,:coverImageUrl,:coverCroppedImageUrl,1,now())

    #get member info
user.info.query=select u.userID,u.firstName,u.middleName,u.lastName,u.emailID, \
  u.updatedDate,upi.profileImageUrl,cau.collegeDetailsId from user u \
  LEFT JOIN user_profile_image upi ON upi.userID = u.userID AND upi.isCurrent = 1 \
  LEFT JOIN college_admin_user cau on cau.userId = u.userID \
  where u.emailID=:userName

user.info.by.id.query=select u.userID,u.firstName,u.middleName,u.lastName,u.emailID, \
  u.updatedDate,upi.profileImageUrl,cau.collegeDetailsId,u.statusID from user u \
  LEFT JOIN user_profile_image upi ON upi.userID = u.userID AND upi.isCurrent = 1 \
  LEFT JOIN college_admin_user cau on cau.userId = u.userID \
  where u.userID=:userId

user.info.by.facebookId.query=select u.userID,u.firstName,u.middleName,u.lastName,u.emailID, \
  u.updatedDate,upi.profileImageUrl,cau.collegeDetailsId from user u \
  LEFT JOIN user_profile_image upi ON upi.userID = u.userID AND upi.isCurrent = 1 \
  LEFT JOIN college_admin_user cau on cau.userId = u.userID \
  where u.facebookID=:facebookId
  
  user.info.by.googleId.query=select u.userID,u.firstName,u.middleName,u.lastName,u.emailID, \
  u.updatedDate,upi.profileImageUrl,cau.collegeDetailsId from user u \
  LEFT JOIN user_profile_image upi ON upi.userID = u.userID AND upi.isCurrent = 1 \
  LEFT JOIN college_admin_user cau on cau.userId = u.userID \
  where u.googleID=:googleID

user.info.by.pwreset.code.query=select u.userID,u.firstName,u.middleName,u.lastName,u.emailID, \
  u.updatedDate,upi.profileImageUrl,cau.collegeDetailsId from user u \
  LEFT JOIN user_profile_image upi ON upi.userID = u.userID AND upi.isCurrent = 1 \
  LEFT JOIN college_admin_user cau on cau.userId = u.userID \
  where u.pwdResetToken=:token

#get member details
user.details.query=SELECT ud.userDetailsID,u.userID,u.firstName,u.lastName,ud.dob,ud.gender,a1.streetName AS currentStreet,\
  sr.role AS securityRole,\
  a1.city as currentCity, a1.zip AS currentZip,s1.stateName AS currentState,c1.countryName AS currentCountry,\
  a2.streetName AS hometownStreet, a2.city AS hometownCity, a2.zip AS hometownZip, s2.stateName AS hometownState,\
  c2.countryName AS hometownCountry,ud.userStatus as status, ud.hereFor as hereForStr, ud.ambition,ud.essay,ud.languages,ud.hobbies,\
  ud.icareIssues,ud.accomplishments AS awards,upi.profileCroppedImageUrl AS profileImageUrl \
  from user u \
  JOIN user_security_role usr ON usr.userId = u.userID \
  JOIN security_role sr ON sr.securityRoleId = usr.securityRoleId \
  LEFT JOIN user_details ud on ud.userID = u.userID \
  LEFT JOIN user_address ua ON ua.userID = ud.userID AND ua.isPrimary = 1 \
  LEFT JOIN user_address ua2 ON ua2.userID = ud.userID AND ua2.isPrimary = 0 \
  LEFT JOIN address a1 ON ua.addressID = a1.addressID \
  LEFT JOIN address a2 ON ua2.addressID = a2.addressID \
  LEFT JOIN state s1 ON s1.stateId = a1.stateId \
  LEFT JOIN state s2 ON s2.stateId = a2.stateId \
  LEFT JOIN country c1 ON c1.countryId = a1.countryId \
  LEFT JOIN country c2 ON a2.countryId = c2.countryId \
  LEFT JOIN user_profile_image upi ON upi.userID = ud.userID \
  AND upi.isCurrent = 1 \
  WHERE u.userID = :userId

#get member username
user.personal.details.query=select u.userId, u.emailId, u.firstName, u.lastName from user u \
   WHERE u.userID = :userId

#get member friends
user.friends.query=select f.friendId,f.friendUserId,u.firstName,u.lastName,upi.profileImageUrl from friend f \
  join user u on u.userID = f.friendUserID \
  left join user_profile_image upi on upi.userID = f.friendUserID and upi.isCurrent = 1 where f.userID=:userId

#mydesk
member.profile.insert.mydesk.query=insert into mydesk(contentId,userID,statusID,contentTypeId) values(:contentId,:userId,1,:contentTypeId)
member.profile.get.mydesk.query=select md.myDeskID, md.contentId,md.contentTypeId, ct.type as contentType, md.createdDate, md.statusID,\
  case md.contentTypeId \
  when 3 then (select p.postDescription from post p where p.postID = md.contentId) \
  when 10 then (select m.content from message m where m.messageId = md.contentId) \
  end as content, \
  case md.contentTypeId \
  when 3 then (select vw.postFirstName from user_posts_vw vw where vw.postID = md.contentId and vw.postReplyID is NULL) \
  when 10 then (select u.firstName from user u join message m on m.createdBy = u.userID where m.messageId = md.contentId) \
  end as firstName, \
  case md.contentTypeId \
  when 3 then (select vw.postLastName from user_posts_vw vw where vw.postID = md.contentId and vw.postReplyID is NULL) \
  when 10 then (select u.lastName from user u join message m on m.createdBy = u.userID where m.messageId = md.contentId) \
  end as lastName, \
  case md.contentTypeId \
  when 3 then (select upi.profileImageUrl from user_posts_vw vw,user_profile_image upi \
  where vw.postID = md.contentId and vw.postUserID=upi.userID and upi.isCurrent = 1 \
  and vw.postReplyID is NULL) \
  when 10 then (select upi.profileImageUrl from message m \
  join user u on u.userID = m.createdBy \
  left join user_profile_image upi on upi.userID = m.createdBy \
  where m.messageId = md.contentId and upi.isCurrent=1) end as profileImageUrl \
  from mydesk md \
  join user u on u.userID = md.userID \
  join content_type ct on ct.contentTypeID = md.contentTypeId \
  where md.userID = :userId and md.statusID=1 order by md.myDeskID

get.mydesk.by.mydeskId.query=select md.myDeskID, md.contentId,md.contentTypeId, ct.type as contentType, md.createdDate,u.firstName,u.lastName, md.statusID, \
  case md.contentTypeId \
  when 3 then (select p.postDescription from post p where p.postID = md.contentId) \
  end as content,upi.profileImageUrl  \
  from mydesk md \
  join user u on u.userID = md.userID \
  left join user_profile_image upi on upi.userID = u.userID \
  and upi.isCurrent = 1  \
  join content_type ct on ct.contentTypeID = md.contentTypeId \
  where md.myDeskID=:myDeskId

#member course
insert.member.course.qry=insert into course(course,issuedBy,date,userID) values (:courseName,:issuedBy,STR_TO_DATE(:courseDate,'%Y-%m-%d'),:userId)

get.member.course.qry= SELECT courseID, course AS courseName, issuedBy, date AS courseDate FROM course WHERE userID =:userId

delete.member.course.qry = delete from course where courseID =:courseID

update.member.course.qry=update course set course = :courseName, issuedBy = :issuedBy, date = STR_TO_DATE(:courseDate,'%Y-%m-%d') \
                            where courseID =:courseID 


#act scores
insert.member.actscore.qry=insert INTO testscore (userID,testDate,english,math,science,reading,composite,testType) \
  VALUES (:userId,:testDate,:englishScore,:mathScore,:scienceScore,:readingScore,:compositeScore,2)

update.member.actscore.qry=update testscore set testDate = :testDate, english = :englishScore, math = :mathScore, \
                            science = :scienceScore, reading = :readingScore, composite = :compositeScore where testScoreID =:testScoreID 

get.member.actscores.qry=SELECT testScoreID,testDate,english,math,science,reading,composite FROM testscore WHERE userID=:userId AND testType=2

delete.member.actscores.qry = delete from testscore where testScoreID =:testScoreID

#gre scores
insert.member.grescore.qry=insert INTO score (userID,scoreDate,verbal,quantitative,writing,total,testType) \
  VALUES (:userId,:scoreDate,:verbal,:quantitative,:writing,:total,4)
get.member.grescore.qry=SELECT scoreID,scoreDate,verbal,quantitative,writing,total FROM score WHERE userID=:userId AND testType=4

delete.member.grescore.qry = delete from score where scoreID =:scoreID

#IELTS scores
insert.member.ielts.qry=insert INTO score (userID,scoreDate,verbal,quantitative,writing,total,testType) \
  VALUES (:userId,:scoreDate,:verbal,:quantitative,:writing,:total,5)
get.member.ielts.qry=SELECT scoreID,scoreDate,verbal,quantitative,writing,total FROM score WHERE userID=:userId AND testType=5

delete.member.ielts.qry = delete from score where scoreID =:scoreID

update.member.score.qry=update score set scoreDate = :scoreDate, verbal = :verbal, \
                           quantitative = :quantitative, writing = :writing, total = :total where scoreID =:scoreID 

#TOEFL scores
insert.member.toefl.qry=insert INTO score (userID,scoreDate,verbal,quantitative,writing,total,testType) \
  VALUES (:userId,:scoreDate,:verbal,:quantitative,:writing,:total,3)
get.member.toefl.qry=SELECT scoreID,scoreDate,verbal,quantitative,writing,total FROM score WHERE userID=:userId AND testType=3

delete.member.toefl.qry = delete from score where scoreID =:scoreID

#sat scores
insert.member.satscore.qry=insert INTO testscore (userID,testDate,math,writing,reading,composite,testType) \
  VALUES (:userId,:testDate,:mathScore,:writingScore,:readingScore,:compositeScore,3)
get.member.satscores.qry=SELECT testScoreID,testDate,math,writing,reading,composite FROM testscore WHERE userID=:userId AND testType=3

delete.member.satscore.qry = delete from testscore where testScoreID =:testScoreID

update.member.satscore.qry=update testscore set testDate = :testDate, math = :mathScore, \
                           writing = :writingScore, reading = :readingScore, composite = :compositeScore where testScoreID =:testScoreID 

#member work
get.member.work.qry=SELECT uw.userWorkId as memberWorkId, c.companyId,c.companyName,uw.title,uw.description,uw.startDate,uw.endDate,\
  a.addressId as 'address.addressId',a.streetName as 'address.streetName',a.city as 'address.city',\
  IFNULL( (SELECT s.stateName FROM state s WHERE s.stateId = a.stateId),a.state) AS 'address.state',\
  IFNULL((SELECT s.stateId from state s WHERE s.stateId = a.stateId),null) AS 'address.stateID',a.zip as 'address.zip',\
  IFNULL((SELECT c.countryName from country c WHERE c.countryId = a.countryId),a.country) AS 'address.country',\
  IFNULL((SELECT c.countryId from country c WHERE c.countryId = a.countryId),null) AS 'address.countryId' from user_work uw \
  JOIN company c ON c.companyId = uw.companyId \
  JOIN address a ON a.addressId = c.addressId \
  WHERE uw.userId = :userId

delete.member.work.qry = delete from user_work where userWorkId =:userWorkId


# member training
get.member.training.qry = SELECT ut.userTrainingId as memberTrainingId,c.companyId,c.companyName,ut.course as trainingCourse,ut.startDate,ut.endDate, \
  ut.addressId, a.addressId AS 'address.addressId', a2.streetName AS 'trainingAddress.streetName', a.streetName AS 'address.streetName', \
  a2.city AS 'trainingAddress.city',a.city AS 'address.city',\
  IFNULL ( (SELECT s.stateName FROM state s WHERE s.stateId = a2.stateId),a2.state) AS 'trainingAddress.state',\
  IFNULL ( (SELECT s.stateName FROM state s WHERE s.stateId = a.stateId),a.state) AS 'address.state',\
  IFNULL((SELECT s.stateId from state s WHERE s.stateId = a2.stateId),null) AS 'trainingAddress.stateId',\
  IFNULL((SELECT s.stateId from state s WHERE s.stateId = a.stateId),null) AS 'address.stateId',\
  a2.zip AS 'trainingAddress.zip',a.zip AS 'address.zip',\
  IFNULL((SELECT c.countryName from country c WHERE c.countryId = a2.countryId),a2.country) AS 'trainingAddress.country',\
  IFNULL((SELECT c.countryName from country c WHERE c.countryId = a.countryId),a.country) AS 'address.country',\
  IFNULL((SELECT c.countryId from country c WHERE c.countryId = a2.countryId),null) AS 'trainingAddress.countryId',\
  IFNULL((SELECT c.countryId from country c WHERE c.countryId = a.countryId),null) AS 'address.countryId' \
  FROM user_training ut \
  JOIN company c ON c.companyId = ut.companyId \
  LEFT JOIN address a ON a.addressId = c.addressId \
  LEFT JOIN address a2 ON a2.addressId = ut.addressId \
  WHERE ut.userId = :userId

delete.member.training.qry = delete from user_training where userTrainingId =:userTrainingId



#user profile views
insert.user.profile.view.qry=insert into user_profile_views(userId,createdDate,viewedByUserId) values (:userId,now(),:viewedByUserId)
get.user.profile.views.qry=select distinct u.userID, u.firstName, u.lastName, upi.profileImageUrl \
  from user u \
  left join user_profile_image upi on upi.userID = u.userID and upi.isCurrent = 1 \
  left join user_profile_views upv on upv.viewedByUserId = u.userID \
  and upv.userId = :userId \
  where u.userID = upv.viewedByUserId 

# update user status to active
update.user.active.qry = update user set statusID=:statusId where userId=:userId

#get members by security role
get.all.users.personal.details.by.role.query=select u.userId, u.emailId, u.firstName, u.lastName \
  from user u \
  join user_security_role sr \
  on sr.userId = u.userId \
  WHERE sr.securityRoleId = :securityRoleId 

# update member mission statement
update.member.amition.qry = update user_details set ambition=:ambition where userId=:userId

# delete institution

delete.member.institution.qry = delete from user_institution where userInstitutionId =:userInstitutionId

insert.mydesk.mytask.query = insert into mydesk_mytask(title,content,assignBy,contentTypeID,userID,statusID,taskDate,favorite,status) values(:title,:content,:assignBy,:contentTypeID,:userId,1,:taskDate,:favorite,:status)

get.mydesk.mytask.query =SELECT taskID,title,content,assignBy,contentTypeID,statusID,taskDate,favorite,status FROM mydesk_mytask WHERE userID=:userId AND statusID=1

update.mydesk.mytask.query = update mydesk_mytask set title=:title, content = :content,contentTypeID = :contentTypeID,taskDate =:taskDate,favorite = :favorite,status = :status where taskID=:taskId

update.mydesk.mytask.status.query = update mydesk_mytask set status = :status where taskID=:taskID


delete.mydesk.mytask.query = delete from mydesk_mytask where taskID=:taskID

insert.apply.country.query = insert into apply_country(countryID,userID,statusID) values(:countryId,:userId,1)

get.apply.country.query = SELECT applyCountryID,countryID,userID from apply_country where userID=:userId AND statusID=1

# checklist query

insert.mydesk.checklist.query = insert into mydesk_checklist(title,userID,statusID) values(:title,:userId,1)

update.mydesk.checklist.query = update mydesk_checklist set title=:title where checklistID=:checklistID

get.mydesk.checklist.query= select cl.checklistID,cl.title,sc.subChecklistID,sc.status, sc.content \
  from mydesk_checklist cl \
  left join mydesk_subchecklist sc on sc.checklistID = cl.checklistID and cl.statusID = 1 \
  where cl.userId = :userId 

delete.mydesk.checklist.query = delete from mydesk_checklist where checklistID=:checklistID

get.contentType.query = SELECT contentTypeID,type from content_type where statusID=1

get.checklist.query= select cl.checklistID,cl.title,sc.subChecklistID,sc.content \
  from mydesk_checklist cl \
  left join mydesk_subchecklist sc on sc.checklistID = cl.checklistID and cl.statusID = 1 \
  where cl.checklistID = :checklistID

# sub checklist query

insert.mydesk.subChecklist.query = insert into mydesk_subchecklist(checklistID,content,createDate) values(:checklistID,:content,now())

delete.mydesk.subChecklist.query = delete from mydesk_subchecklist where subChecklistID=:subChecklistID

delete.checklist.subchecklist.query = delete from mydesk_subchecklist where checklistID=:checklistID

update.mydesk.subChecklist.query = update mydesk_subchecklist set content=:content where subChecklistID=:subChecklistID

update.mydesk.subChecklist.statue.query = update mydesk_subchecklist set status=:status where subChecklistID=:subChecklistID

insert.user.documents.query = insert into attachments(url,contentType,contentLength,fileName,createdBy,createdAt,updatedBy,updatedAt,isActive) \
  values (:url,:contentType,:contentLength,:fileName,:userId,now(),:userId,now(),1)

get.user.documents.qry = select attachmentId,url,contentType,contentLength,fileName,createdBy as userId from attachments \
  where createdBy = :createdBy and isActive=1

#New Queries
#get member username
user.personal.details.query.new=select u.userId, u.emailId, u.firstName, u.lastName from user u \
   WHERE u.userID = :userId

#get member info
user.info.by.id.query.new=select u.userID,u.firstName,u.middleName,u.lastName,u.emailID, \
  u.updatedDate,upi.profileImageUrl,cau.collegeDetailsId,u.statusID from user u \
  LEFT JOIN user_profile_image upi ON upi.userID = u.userID AND upi.isCurrent = 1 \
  LEFT JOIN college_admin_user cau on cau.userId = u.userID \
  where u.userID=:userId

#get member details
user.details.query.new=SELECT ud.userDetailsID,u.userID,u.firstName,u.lastName,ud.dob,ud.gender,a1.streetName AS currentStreet,\
  sr.role AS securityRole,\
  a1.city as currentCity, a1.zip AS currentZip,s1.stateName AS currentState,c1.countryName AS currentCountry,\
  a2.streetName AS hometownStreet, a2.city AS hometownCity, a2.zip AS hometownZip, s2.stateName AS hometownState,\
  c2.countryName AS hometownCountry,ud.userStatus as status, ud.hereFor as hereForStr, ud.ambition,ud.essay,ud.languages,ud.hobbies,\
  ud.icareIssues,ud.accomplishments AS awards,upi.profileCroppedImageUrl AS profileImageUrl \
  from user u \
  JOIN user_security_role usr ON usr.userId = u.userID \
  JOIN security_role sr ON sr.securityRoleId = usr.securityRoleId \
  LEFT JOIN user_details ud on ud.userID = u.userID \
  LEFT JOIN user_address ua ON ua.userID = ud.userID AND ua.isPrimary = 1 \
  LEFT JOIN user_address ua2 ON ua2.userID = ud.userID AND ua2.isPrimary = 0 \
  LEFT JOIN address a1 ON ua.addressID = a1.addressID \
  LEFT JOIN address a2 ON ua2.addressID = a2.addressID \
  LEFT JOIN state s1 ON s1.stateId = a1.stateId \
  LEFT JOIN state s2 ON s2.stateId = a2.stateId \
  LEFT JOIN country c1 ON c1.countryId = a1.countryId \
  LEFT JOIN country c2 ON a2.countryId = c2.countryId \
  LEFT JOIN user_profile_image upi ON upi.userID = ud.userID \
  AND upi.isCurrent = 1 \
  WHERE u.userID = :userId

#user profile views
insert.user.profile.view.qry.new=insert into user_profile_views(userId,createdDate,viewedByUserId) values (:userId,now(),:viewedByUserId)

#user preference

insert.user.preference.qry = insert into user_preference(userId,courseYear,countryName,intake,createDate) values (:userId,:courseYear,:countryName,:intake,now())

get.user.preference.qry = select userPreferenceID,courseYear,countryName,intake from user_preference where userId = :userId

update.user.preference.query = update user_preference set courseYear=:courseYear,countryName = :countryName, intake = :intake where userPreferenceID=:userPreferenceID

get.mydesk.by.mytask.query =SELECT taskID,title,content,assignBy,contentTypeID,statusID,taskDate FROM mydesk_mytask WHERE taskID=:taskID

update.user.names.qry=update user set firstName = :firstName, lastName = :lastName where userID=:userId

